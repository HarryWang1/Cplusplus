createdAt: "2017-12-28T00:39:07.223Z"
updatedAt: "2017-12-28T00:56:54.090Z"
type: "MARKDOWN_NOTE"
folder: "093dd64608a1ed5580f1"
title: "Starting C++"
content: '''
  ## Starting C++
  
  #### Code Snippet Examples
  ```js
  #include <iostream>
  void Log(const char* message);
  
  int main() 
  {
  	std::cout << "Hello World" << std::endl;
  	std::cin.get();
  }
  
  ```
  
  ```js
  #include <iostream>
  
  void Log(const char* message)
  {
  	std::cout << message << std::endl;
  }
  
  ```
  
  #### Short Explanation:
  ```js
  #include <iostream>
  ```
  This is a header file. This is a preprocessor statement that gets compiled before the rest of the file gets compiled. This essentially, and literally, copies and pastes into the file. 
  
  std::cout and std::endl and std::endl are all part of: < iostream >
  
  #### Declarations
  ```js
  main()
  {
  void Log(const char* message);
  ...
  }
  ```
  This is a declaration, we are making a promise to the compiler that there is a function called Log. It may or may not exist, it just is telling the main function that Log exists so that it will compile, and not wonder whether or not Log exists. 
  
  
  ```js
  main()
  {
  void Log(const char*);
  ...
  }
  ```
  
  It is not necessary in a declaration to give a name to the parameter, but as a rule of thumb it can be nicer to specify the name. 
  
  #### Definition
  Definition is the actual body of the code. So in the example, after calling a declaration of Log in the main function, the definition of Log needs to be actually defined. 
  
  ```js
  #include <iostream>
  
  void Log(const char* message)
  {
      //BODY
  	std::cout << message << std::endl;
      //BODY
  }
  
  ```
  
'''
tags: [
  "C++"
  "HelloWorld"
  "hello"
  "world"
  "iostream"
  "header"
  "preprocessor"
]
isStarred: false
isTrashed: false
