createdAt: "2018-01-24T19:59:08.052Z"
updatedAt: "2018-01-24T21:16:21.159Z"
type: "MARKDOWN_NOTE"
folder: "8adc0cf20de0e39bcade"
title: "C++: Vetors"
content: '''
  ### C++: Vetors
  1/24/18
  
  > Make sure to always include the type for variables. This isn't Python anymore. 
  
  ```
  #include <iostream>
  #include <string>
  #include <vector>
  using namespace std;
  
  int main(){
      for (int i = 0; i < 100 ; i += 2){
          if ( i % 7 == 0) break;
          cout << i << ' ' ;
      }
      
      cout << endl;
      vector <int> v;
  ```
  #### Vector Methods:
  
  ```
  push_back(item) // copies something to the end of the vector
  
  pop_back() // Pops off the end of the vector
  
  size() // get size
  
  clear() // set the size to 0
  
  back() // direct reference to the end
  
  ```
  If we wanted to create a pop-kth() method, we can go to the k number and swap k + 1 all the way to the end, then pop that off. 
  
  Accessing a number in vector: 
  > v[n] // n being a number
  > Ex. Grabbing the end:
  > v[v.size() - 1]
  
  ```
  for (int i = 1; i < 10; ++i){
      v.push_back(i * 1);
  }
  ```
  
  
  **Printing out an Entire Vector**
  ```
  for (int i = 0; i < v.size(); ++i){
      cout << v[i] << ' ';
  }
  
  cout << endl;
  ```
  > Be careful of v.size, b/c it returns something called size_T which returns a # depending on your architecture. An unsigned int, an unsigned long long, etc. (Usually is an unsigned int). 
  
  > **The reason to care** is that if your vector is greater than that 2 billion etc it will go to -2billion for int, or for unsigned int will go from 4 billion back to 0. 
  
  So the best way to write to print an entire vector is using a **size_t**:
  
  ```
  for (size_t i = 0; i < v.size(); ++i)
  ```
  **HOWEVER** With C++ 11, there is a new implementation that allows for interating through a vector without the assignment of an additional index. 
  
  ```
  vector <int> v;
  
  for (int item : v){
      cout << item << ' ';
  }
  cout << endl;
  ```
  
  THIS COPIES EACH ITEM IN VECTOR INTO ITEM AND PRINT ITEM. WHich is why something like:
  
  ```
  for (int item :v) {
   item += 3; 
  }
  ```
  wouldn't work. It would literally just add three to whatever item copies over instead of skipping over indexes of three. 
  
  ### Opening Files In C++
  
  First need a:
  ```
  #include <fstream>
  
  ifstream ifs.("jabberwocky");
  ```
  
  Then... To read into and to get each thing, for breaking up a white space token, or each word:
  
  ```
  ifstream ifs("jabberwocky.txt");
  	string word;
  	ifs >> word;
  	cout << word << endl;
  	while (ifs >> word) {
  		cout << word << endl;
  	}
  ```
  To do Char...
  
  ```
  	ifstream ifsChar("jabberwocky.txt");
  	char word;
  	ifsChar >> word;
  	cout << word << endl;
  	while (ifs >> word) {
  		cout << word << endl;
  	}
  ```
  
  ***BUT THE >> Will skip the white space, which will cause it to read .txt and print each char without space. ***
  
  If you want it to not skip though white space though one can do:
  ```
  char c; 
  ifsChar >> noskipws; // <--
  ifsChar >> c;
  cout << c << endl;
  while (ifsChar >> c)
  {
  cout << c;
  }
  ```
  When you pass in values into functions in C++, you pass in a **COPY**. 
  
  This means if you had for ex. 
  ```
  int i = 0;
  
  int function(num){
      return ++num;
  }
  ```
  
  and you call....
  
  ```
  function(i);
  cout << i;
  ```
  You will just get the original number of i again. 
  
  You can instead!!! If you want, pass in a reference!
  
  ```
  void addOneRef(int &value)
  ```
  WHICH MEANS THAT THIS IS A REFERENCE TO AN INT AND NOT AN ACTUAL INT. 
  
  ```
  
  int add(int var) {
  	++var;
  }
  
  void addRef(int& var) {
  	++var;
  }
  
  ```
  
  This is helpful b/c if you are working with lets say a billion size vector:
  
  ```
  void printVector(vector<int>& myVec){
      for (int item: myVec){
          cout << item << ' ';
          cout << endl;
      }
  ```
  Instead of copying, b/c int item: would usually copy over, you are passing a reference. 
  
  **BUT THIS IS STILL WRONG, b/c there is still a problem that ppl think that with a reference that you still want it to be changed.**
  
  So pass it in instead by constant:
  
  ```
  void printVector(const vector<int>& myVec){
      for (int item: myVec){
          cout << item << ' ';
          cout << endl;
      }
  ```
  
  
  
  
'''
tags: [
  "1/24/18"
]
isStarred: false
isTrashed: false
